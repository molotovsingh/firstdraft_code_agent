# Modern Docker Compose - version field is obsolete
services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: firstdraft
      POSTGRES_PASSWORD: firstdraft
      POSTGRES_DB: firstdraft_system
      # Optimize PostgreSQL for limited memory
      POSTGRES_SHARED_BUFFERS: "128MB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "512MB"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U firstdraft"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  minio:
    image: minio/minio:RELEASE.2024-06-13T22-53-53Z
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'

  create-bucket:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: ["/bin/sh","-c"]
    command: >-
      "mc alias set local http://minio:9000 minioadmin minioadmin &&
       mc mb -p local/firstdraft-dev || true"
    restart: "no"
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  api:
    build:
      context: ..
      dockerfile: infra/dockerfiles/Dockerfile.api
    env_file:
      - ../.env
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
      create-bucket:
        condition: service_completed_successfully
      migrator:
        condition: service_completed_successfully
    ports:
      - "8000:8000"
    command: ["uvicorn", "apps.block0_api.main:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "2"]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.25'

  worker:
    build:
      context: ..
      dockerfile: infra/dockerfiles/Dockerfile.worker
    env_file:
      - ../.env
    environment:
      - PYTHONUNBUFFERED=1
      # Limit Celery concurrency to prevent memory overload
      - CELERY_WORKER_CONCURRENCY=2
      - CELERY_WORKER_PREFETCH_MULTIPLIER=1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio:
        condition: service_started
    command: ["celery", "-A", "apps.block0_worker.worker:celery_app", "worker", "--loglevel=INFO", "--concurrency=2", "--prefetch-multiplier=1"]
    # To expose Prometheus metrics from worker, set METRICS_PORT in .env and optionally map a port:
    # environment:
    #   - METRICS_PORT=9300
    # ports:
    #   - "9300:9300"
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import socket; s=socket.socket(); s.settimeout(2); s.connect((\"127.0.0.1\", 6379))' || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 12
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  migrator:
    build:
      context: ..
      dockerfile: infra/dockerfiles/Dockerfile.api
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
    command: ["alembic", "upgrade", "head"]
    restart: "no"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

networks:
  default:
    name: firstdraft_net
volumes:
  pgdata:
  minio_data:
