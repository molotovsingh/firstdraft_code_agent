Okay, I will implement the presigned upload functionality as requested. Here is my plan:

1.  **Inspect Existing Code:** I'll start by reading `shared/storage/s3.py`, `apps/block0_api/main.py`, `API.md`, and `requirements.txt` to understand the current project structure, coding style, and dependencies.
2.  **Implement Storage Helpers:** I'll add the `presign_put_url` and `presign_get_url` methods to the `Storage` class in `shared/storage/s3.py`.
3.  **Implement API Endpoints:** I'll add the `POST /v0/uploads/presign` and `GET /v0/uploads/presign_download` endpoints in `apps/block0_api/main.py`.
4.  **Create Smoke Test:** I'll create a new script, `scripts/smoke_presign.py`, to test the entire presigned upload and download flow.
5.  **Update Documentation:** I'll update `API.md` to reflect the new endpoints.
6.  **Deliver Patches:** I will provide all changes in a single response.

I will now proceed with reading the necessary files.
Okay, I have reviewed the files and am ready to proceed. Here is the plan:

1.  **`shared/storage/s3.py`**: I will add the `presign_put_url` and `presign_get_url` methods to the `Storage` class. These will use the underlying `minio` client's presigned URL generation capabilities.
2.  **`apps/block0_api/main.py`**: I will introduce two new endpoints. A `POST /v0/uploads/presign` endpoint will generate and return a presigned PUT URL and a unique object key for a new file upload. A `GET /v0/uploads/presign_download` endpoint will provide a short-lived URL to download an object. I will use Pydantic models for request validation.
3.  **`API.md`**: I will add a new section to the API documentation describing the new `/v0/uploads` endpoints, their parameters, and responses.
4.  **`scripts/smoke_presign.py`**: I will create this new script to serve as an integration test. It will call the presign endpoint, upload a test file to the returned URL, and then use the presign download endpoint to fetch the file back and verify its integrity.

I will now generate the necessary code changes.I have implemented the requested features for presigned uploads. Here is a summary of the changes:

*   **`shared/storage/s3.py`**: Added `presign_put_url` and `presign_get_url` methods to the `Storage` class to generate presigned URLs for S3 uploads and downloads, respectively.
*   **`apps/block0_api/main.py`**: Introduced two new API endpoints:
    *   `POST /v0/uploads/presign`: Accepts upload metadata and returns a presigned URL for clients to directly upload files to S3.
    *   `GET /v0/uploads/presign_download`: Provides a temporary URL to download an object, mainly for testing purposes.
*   **`API.md`**: Updated the API documentation to include the specifications for the new presigned URL endpoints.
*   **`scripts/smoke_presign.py`**: Created a new smoke test script that verifies the end-to-end presigned upload and download functionality. It gets a presigned URL, uploads a test file, and then downloads it to confirm the process works correctly.

These changes introduce the presigned upload flow without modifying the existing document processing path, as requested.
